jacoco {
    reportsDir = file("build/jacoco")
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: project.extensions.ext.coverageExclude << '**/libs/*')
        })
    }
}

project.afterEvaluate {
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'BRANCH'
                    minimum = project.extensions.ext.branchCoverage
                }
            }
            rule {
                limit {
                    counter = 'LINE'
                    minimum = project.extensions.ext.lineCoverage
                }
            }
        }
        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it, exclude: project.extensions.ext.coverageExclude << '**/libs/*')
            })
        }
    }.doFirst {
        println "branch min coverage ratio: ${project.extensions.ext.branchCoverage}"
        println "line   min coverage ratio: ${project.extensions.ext.lineCoverage}"
        println "coverage exclude: ${project.extensions.ext.coverageExclude << '**/libs/*'}"
    }
}

check.dependsOn jacocoTestCoverageVerification
